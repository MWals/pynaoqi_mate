#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alinfraredproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALInfrared")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALInfrared(object):
    def __init__(self):
        self.proxy = None

    def force_connect(self):
        self.proxy = ALProxy("ALInfrared")

    @lazy_init
    def confRemoteRecordSave(self):
        """Rewrite the LIRC daemon configuration file (lircd.conf) with everyremotes configuration concatenated, and reload it in LIRC daemons
        """
        return self.proxy.confRemoteRecordSave()

    @lazy_init
    def initReception(self, RepeatThreshold):
        """Init IR reception (connect as a client to the LIRC daemon).

        :param int RepeatThreshold: Give the keep-pressing threshold after which the repetition of a key is taken into consideration.
        """
        return self.proxy.initReception(RepeatThreshold)

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def send32(self, Data_IR):
        """Send 4 octets by IR.

        :param str Data_IR: 4 octets to send through IR.
        """
        return self.proxy.send32(Data_IR)

    @lazy_init
    def send322(self, Octet1, Octet2, Octet3, Octet4):
        """Send 4 octets by IR.

        :param int Octet1: Octet 1 to send through IR.
        :param int Octet2: Octet 2 to send through IR.
        :param int Octet3: Octet 3 to send through IR.
        :param int Octet4: Octet 4 to send through IR.
        """
        return self.proxy.send32(Octet1, Octet2, Octet3, Octet4)

    @lazy_init
    def send8(self, Octet):
        """Send 1 octet by IR.

        :param int Octet: octet to send through IR.
        """
        return self.proxy.send8(Octet)

    @lazy_init
    def sendIpAddress(self, IP):
        """Send an IP by IR.

        :param str IP: IP adress to send through IR.
        """
        return self.proxy.sendIpAddress(IP)

    @lazy_init
    def sendRemoteKey(self, Remote, Key):
        """Simulate a remote control (Nao as a remote control).

        :param str Remote: IR remote control name.
        :param str Key: IR remote control key name.
        """
        return self.proxy.sendRemoteKey(Remote, Key)

    @lazy_init
    def sendRemoteKeyWithTime(self, Remote, Key, pTimeMs):
        """Simulate a remote control (Nao as a remote control).

        :param str Remote: IR remote control name.
        :param str Key: IR remote control key name.
        :param int pTimeMs: The time in ms when the remote key must be send. 0 deals like sendRemoteKey
        """
        return self.proxy.sendRemoteKeyWithTime(Remote, Key, pTimeMs)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
