#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alresourcemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALResourceManager(object):
    def __init__(self):
        self.proxy = ALProxy("ALResourceManager")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def acquireResource(self, resourceName, moduleName, callbackName, timeoutSeconds):
        """Wait and acquire a resource

        :param str resourceName: Resource name
        :param str moduleName: Module name
        :param str callbackName: callback name
        :param int timeoutSeconds: Timeout in seconds
        """
        return self.proxy.acquireResource(resourceName, moduleName, callbackName, timeoutSeconds)

    def acquireResourcesTree(self, resourceName, moduleName, callbackName, timeoutSeconds):
        """Wait for resource tree. Parent and children are not in conflict. Local function

        :param std::vector<std::string> resourceName: Resource name
        :param str moduleName: Module name
        :param str callbackName: callback name
        :param int timeoutSeconds: Timeout in seconds
        """
        return self.proxy.acquireResourcesTree(resourceName, moduleName, callbackName, timeoutSeconds)

    def areResourcesFree(self, resourceNames):
        """True if all resources are free

        :param std::vector<std::string> resourceNames: Resource names
        :returns bool: True if all the specify resources are free
        """
        return self.proxy.areResourcesFree(resourceNames)

    def areResourcesOwnedBy(self, resourceNameList, ownerName):
        """True if all the specified resources are owned by the owner

        :param std::vector<std::string> resourceNameList: Resource name
        :param str ownerName: Owner pointer with hierarchy
        :returns bool: True if all the specify resources are owned by the owner
        """
        return self.proxy.areResourcesOwnedBy(resourceNameList, ownerName)

    def checkStateResourceFree(self, resourceName):
        """check if all the state resource in the list are free

        :param std::vector<std::string> resourceName: Resource name
        :returns bool: 
        """
        return self.proxy.checkStateResourceFree(resourceName)

    def createResource(self, resourceName, parentResourceName):
        """Create a resource

        :param str resourceName: Resource name to create
        :param str parentResourceName: Parent resource name or empty string for root resource
        """
        return self.proxy.createResource(resourceName, parentResourceName)

    def createResourcesList(self, resourceGroupName, resourceName):
        """True if a resource is in another parent resource

        :param std::vector<std::string> resourceGroupName: Group name. Ex: Arm
        :param str resourceName: Resource name
        """
        return self.proxy.createResourcesList(resourceGroupName, resourceName)

    def deleteResource(self, resourceName, deleteChildResources):
        """Delete a root resource

        :param str resourceName: Resource name to delete
        :param bool deleteChildResources: DEPRECATED: Delete child resources if true
        """
        return self.proxy.deleteResource(resourceName, deleteChildResources)

    def enableStateResource(self, resourceName, enabled):
        """Enable or disable a state resource

        :param str resourceName: The name of the resource that you wish enable of disable. e.g. Standing
        :param bool enabled: True to enable, false to disable
        """
        return self.proxy.enableStateResource(resourceName, enabled)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getResources(self):
        """Get tree of resources

        :returns AL::ALValue: 
        """
        return self.proxy.getResources()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isInGroup(self, resourceGroupName, resourceName):
        """True if a resource is in another parent resource

        :param str resourceGroupName: Group name. Ex: Arm
        :param str resourceName: Resource name
        :returns bool: 
        """
        return self.proxy.isInGroup(resourceGroupName, resourceName)

    def isResourceFree(self, resourceNames):
        """True if the resource is free

        :param str resourceNames: Resource name
        :returns bool: True if the specify resources is free
        """
        return self.proxy.isResourceFree(resourceNames)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def ownersGet(self):
        """The tree of the resources owners.

        :returns AL::ALValue: 
        """
        return self.proxy.ownersGet()

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def releaseResource(self, resourceName, ownerName):
        """Release resource

        :param str resourceName: Resource name
        :param str ownerName: Existing owner name
        """
        return self.proxy.releaseResource(resourceName, ownerName)

    def releaseResources(self, resourceNames, ownerName):
        """Release  resources list

        :param std::vector<std::string> resourceNames: Resource names
        :param str ownerName: Owner name
        """
        return self.proxy.releaseResources(resourceNames, ownerName)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)

    def waitForOptionalResourcesTree(self, arg1, arg2, arg3, arg4, arg5):
        """Wait resource

        :param std::vector<std::string> arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        :param int arg4: arg
        :param std::vector<std::string> arg5: arg
        :returns std::vector<std::string>: 
        """
        return self.proxy.waitForOptionalResourcesTree(arg1, arg2, arg3, arg4, arg5)

    def waitForResource(self, resourceName, ownerName, callbackName, timeoutSeconds):
        """Wait resource

        :param str resourceName: Resource name
        :param str ownerName: Module name
        :param str callbackName: callback name
        :param int timeoutSeconds: Timeout in seconds
        """
        return self.proxy.waitForResource(resourceName, ownerName, callbackName, timeoutSeconds)

    def waitForResourcesTree(self, resourceName, moduleName, callbackName, timeoutSeconds):
        """Wait for resource tree. Parent and children are not in conflict. Local function

        :param std::vector<std::string> resourceName: Resource name
        :param str moduleName: Module name
        :param str callbackName: callback name
        :param int timeoutSeconds: Timeout in seconds
        """
        return self.proxy.waitForResourcesTree(resourceName, moduleName, callbackName, timeoutSeconds)
