#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/dcmproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("DCM")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class DCM(object):
    def __init__(self):
        self.proxy = None

    def force_connect(self):
        self.proxy = ALProxy("DCM")

    @lazy_init
    def calibration(self, calibrationInput):
        """Calibration of a joint

        :param AL::ALValue calibrationInput: A complex ALValue. See red documentation
        """
        return self.proxy.calibration(calibrationInput)

    @lazy_init
    def createAlias(self, alias):
        """Create or change an alias (list of actuators)

        :param AL::ALValue alias: Alias name and description
        :returns AL::ALValue: Same as pParams, but with the name removed if the actuator is not found
        """
        return self.proxy.createAlias(alias)

    @lazy_init
    def getPrefix(self):
        """Return the STM base name

        :returns AL::ALValue: the STM base name for all device/sensors (1st string in the array) and all devices (2nd string in the array)
        """
        return self.proxy.getPrefix()

    @lazy_init
    def getTime(self, offset):
        """Return the DCM time

        :param int offset: optional time in ms (signed) to add/remove
        :returns int: An integer (could be signed) with the DCM time
        """
        return self.proxy.getTime(offset)

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def preferences(self, action, target, keyName, keyValue):
        """Save updated value from DCM in XML pref file

        :param str action: string : 'Save' 'Load' 'Add'
        :param str target: string : 'Chest' 'Head' 'Main' 'All'
        :param str keyName: The name of the key if action = 'Add'.
        :param AL::ALValue keyValue: The ALVAlue of the key to add
        :returns int: Nothing
        """
        return self.proxy.preferences(action, target, keyName, keyValue)

    @lazy_init
    def set(self, commands):
        """Call this function to send a timed-command list to an actuator

        :param AL::ALValue commands: AL::ALValue with all data
        """
        return self.proxy.set(commands)

    @lazy_init
    def setAlias(self, commands):
        """Call this function to send timed-command list to an alias (list of actuators)

        :param AL::ALValue commands: AL::ALValue with all data
        """
        return self.proxy.setAlias(commands)

    @lazy_init
    def setAlias2(self, name, time, commands):
        """Call this function to send timed-command list to an alias (list of actuators) with "ClearAll" merge startegy

        :param str name: alias name
        :param int time: time for the timed command
        :param std::vector<float> commands: std::vector<float> with all commands
        """
        return self.proxy.setAlias(name, time, commands)

    @lazy_init
    def special(self, result):
        """Special DCM commands

        :param str result: one string and could be Reset, Version, Chain, Diagnostic, Config
        """
        return self.proxy.special(result)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
