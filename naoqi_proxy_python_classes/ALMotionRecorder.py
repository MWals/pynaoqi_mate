#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/almotionrecorderproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALMotionRecorder(object):
    def __init__(self):
        self.proxy = ALProxy("ALMotionRecorder")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def dataChanged(self, dataName, data, message):
        """Called by ALMemory when subcription data is updated. INTERNAL

        :param str dataName: Name of the subscribed data.
        :param AL::ALValue data: Value of the the subscribed data
        :param str message: The message give when subscribing.
        """
        return self.proxy.dataChanged(dataName, data, message)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def startInteractiveRecording(self, jointsToRecord, nbPoses, extensionAllowed, mode):
        """Start recording the motion in an interactive mode

        :param std::vector<std::string> jointsToRecord: Names of joints that must be recorded
        :param int nbPoses: Default number of poses to record
        :param bool extensionAllowed: Set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped
        :param int mode: Indicates which interactive mode must be used. 1 : Use right bumper to enslave and left bumper to store the pose  (deprecated); 2 : Use chest button to store the pose
        """
        return self.proxy.startInteractiveRecording(jointsToRecord, nbPoses, extensionAllowed, mode)

    def startPeriodicRecording(self, jointsToRecord, nbPoses, extensionAllowed, timeStep, jointsToReplay, replayData):
        """Start recording the motion in a periodic mode

        :param std::vector<std::string> jointsToRecord: Names of joints that must be recorded
        :param int nbPoses: Default number of poses to record
        :param bool extensionAllowed: set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped
        :param float timeStep: Time in seconds to wait between two poses
        :param std::vector<std::string> jointsToReplay: Names of joints that must be replayed
        :param AL::ALValue replayData: An ALValue holding data for replayed joints. It holds two ALValues. The first one is an ALValue where each line corresponds to a joint, and column elements are times of control points The second one is also an ALValue where each line corresponds to a joint, but column elements are arrays containing [float angle, Handle1, Handle2] elements, where Handle is [int InterpolationType, float dAngle, float dTime] describing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceding the point, the second describes the curve following the point.
        """
        return self.proxy.startPeriodicRecording(jointsToRecord, nbPoses, extensionAllowed, timeStep, jointsToReplay, replayData)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopAndGetRecording(self):
        """Stop recording the motion and return data

        :returns AL::ALValue: Returns the recorded data as an ALValue: [[JointName1,[pos1, pos2, ...]], [JointName2,[pos1, pos2, ...]], ...]
        """
        return self.proxy.stopAndGetRecording()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
