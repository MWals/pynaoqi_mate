#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alinfraredproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALInfrared(object):
    def __init__(self):
        self.proxy = ALProxy("ALInfrared")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def confRemoteRecordSave(self):
        """Rewrite the LIRC daemon configuration file (lircd.conf) with everyremotes configuration concatenated, and reload it in LIRC daemons
        """
        return self.proxy.confRemoteRecordSave()

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def initReception(self, RepeatThreshold):
        """Init IR reception (connect as a client to the LIRC daemon).

        :param int RepeatThreshold: Give the keep-pressing threshold after which the repetition of a key is taken into consideration.
        """
        return self.proxy.initReception(RepeatThreshold)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def send32(self, Data_IR):
        """Send 4 octets by IR.

        :param str Data_IR: 4 octets to send through IR.
        """
        return self.proxy.send32(Data_IR)

    def send322(self, Octet1, Octet2, Octet3, Octet4):
        """Send 4 octets by IR.

        :param int Octet1: Octet 1 to send through IR.
        :param int Octet2: Octet 2 to send through IR.
        :param int Octet3: Octet 3 to send through IR.
        :param int Octet4: Octet 4 to send through IR.
        """
        return self.proxy.send32(Octet1, Octet2, Octet3, Octet4)

    def send8(self, Octet):
        """Send 1 octet by IR.

        :param int Octet: octet to send through IR.
        """
        return self.proxy.send8(Octet)

    def sendIpAddress(self, IP):
        """Send an IP by IR.

        :param str IP: IP adress to send through IR.
        """
        return self.proxy.sendIpAddress(IP)

    def sendRemoteKey(self, Remote, Key):
        """Simulate a remote control (Nao as a remote control).

        :param str Remote: IR remote control name.
        :param str Key: IR remote control key name.
        """
        return self.proxy.sendRemoteKey(Remote, Key)

    def sendRemoteKeyWithTime(self, Remote, Key, pTimeMs):
        """Simulate a remote control (Nao as a remote control).

        :param str Remote: IR remote control name.
        :param str Key: IR remote control key name.
        :param int pTimeMs: The time in ms when the remote key must be send. 0 deals like sendRemoteKey
        """
        return self.proxy.sendRemoteKeyWithTime(Remote, Key, pTimeMs)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
