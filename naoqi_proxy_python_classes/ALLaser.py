#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/allaserproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALLaser")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALLaser(object):
    def __init__(self):
        self.proxy = None

    @lazy_init
    def laserOFF(self):
        """Disable laser light
        """
        return self.proxy.laserOFF()

    @lazy_init
    def laserON(self):
        """Enable laser light and sampling
        """
        return self.proxy.laserON()

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def setDetectingLength(self, length_min_l, length_max_l):
        """Set detection threshold of the laser

        :param int length_min_l: int containing the min length that the laser will detect(mm), this value must be upper than 20 mm
        :param int length_max_l: int containing the max length that the laser will detect(mm), this value must be lower than 5600 mm
        """
        return self.proxy.setDetectingLength(length_min_l, length_max_l)

    @lazy_init
    def setOpeningAngle(self, angle_min_f, angle_max_f):
        """Set openning angle of the laser

        :param float angle_min_f: float containing the min value in rad, this value must be upper than -2.35619449
        :param float angle_max_f: float containing the max value in rad, this value must be lower than 2.092349795
        """
        return self.proxy.setOpeningAngle(angle_min_f, angle_max_f)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
