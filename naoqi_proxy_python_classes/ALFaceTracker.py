#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alfacetrackerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALFaceTracker")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALFaceTracker(object):
    def __init__(self):
        self.proxy = None

    @lazy_init
    def getPosition(self):
        """Return the [x, y, z] position of the face in FRAME_TORSO. This is done assuming an average face size, so it might not be very accurate.  This invalidates the isNewData field of the tracker. See isNewData()) for more details.

        :returns std::vector<float>: An Array containing the face position [x, y, z].
        """
        return self.proxy.getPosition()

    @lazy_init
    def isActive(self):
        """Return true if the face Tracker is running.

        :returns bool: true if the face Tracker is running.
        """
        return self.proxy.isActive()

    @lazy_init
    def isNewData(self):
        """Return true if a new face was detected since the last getPosition().

        :returns bool: true if a new face was detected since the last getPosition().
        """
        return self.proxy.isNewData()

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def setWholeBodyOn(self, pWholeBodyOn):
        """if true, the tracking will be through a Whole Body Process.

        :param bool pWholeBodyOn: The whole Body state
        """
        return self.proxy.setWholeBodyOn(pWholeBodyOn)

    @lazy_init
    def startTracker(self):
        """Start the tracker by Subscribing to Event FaceDetected from ALFaceDetection module. Then Wait Event FaceDetected from ALFaceDetection module. And finally send information to motion for head tracking. NOTE: Stiffness of Head must be set to 1.0 to move!
        """
        return self.proxy.startTracker()

    @lazy_init
    def stopTracker(self):
        """Stop the tracker by Unsubscribing to Event FaceDetected from ALFaceDetection module.
        """
        return self.proxy.stopTracker()

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
