#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/almemorywatcherproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALMemoryWatcher(object):
    def __init__(self):
        self.proxy = ALProxy("ALMemoryWatcher")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def addListener(self, name, interval):
        """add an ALMemory key to the list of keys to listen to

        :param str name: the complete name of the ALMemory key
        :param int interval: interval of time the system should wait before retrieving this key value again
        """
        return self.proxy.addListener(name, interval)

    def addListener2(self, name):
        """add an ALMemory key to the list of keys to listen to

        :param str name: the complete name of the ALMemory key
        """
        return self.proxy.addListener(name)

    def addListeners(self, listNames, interval):
        """add a list of ALMemory keys to the list of keys to listen

        :param std::vector<std::string> listNames: the vector of complete names of ALMemory keys
        :param int interval: interval of time the system should wait before retrieving this key value again
        """
        return self.proxy.addListeners(listNames, interval)

    def addListeners2(self, listNames):
        """add a list of ALMemory keys to the list of keys to listen

        :param std::vector<std::string> listNames: the vector of complete names of ALMemory keys
        """
        return self.proxy.addListeners(listNames)

    def clearBuffer(self):
        """remove all buffered data.                                           The list of keys listened to keeps unchanged.
        """
        return self.proxy.clearBuffer()

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getData(self):
        """return an ALValue containing all buffered data                                       since the last call of getData().

        :returns AL::ALValue: The complete array of all buffered data
        """
        return self.proxy.getData()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def isWatching(self):
        """tells whether keys are watched and data being gathered.

        :returns bool: true if keys are being watched.
        """
        return self.proxy.isWatching()

    def listeners(self):
        """get the list of listened ALMemory keys

        :returns std::vector<std::string>: a list of ALMemory keys
        """
        return self.proxy.listeners()

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def removeAllListeners(self):
        """remove all keys listened to
        """
        return self.proxy.removeAllListeners()

    def removeListener(self, name):
        """remove a key from the list to listen to

        :param str name: the name of the key to stop to listen
        """
        return self.proxy.removeListener(name)

    def removeListeners(self, listNames):
        """remove a list of key from the list to listen

        :param std::vector<std::string> listNames: the vector of names of key to stop to listen
        """
        return self.proxy.removeListeners(listNames)

    def setPeriodMs(self, period):
        """edit "period" value between two buffering.

        :param int period: the new period (in ms) to apply.
        """
        return self.proxy.setPeriodMs(period)

    def startWatching(self, period):
        """start listening to selected keys from ALMemory

        :param int period: the time between two listen of ALMemory keys, in milliseconds.
        """
        return self.proxy.startWatching(period)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopWatching(self):
        """stop listening selected keys from ALMemory.                                    List of listened keys and associated buffers keep unchanged.
        """
        return self.proxy.stopWatching()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
