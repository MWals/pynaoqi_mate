#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/packagemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("PackageManager")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class PackageManager(object):
    def __init__(self):
        self.proxy = None

    def force_connect(self):
        self.proxy = ALProxy("PackageManager")

    @lazy_init
    def getPackage(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        return self.proxy.getPackage(arg1)

    @lazy_init
    def getPackageIcon(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        return self.proxy.getPackageIcon(arg1)

    @lazy_init
    def getPackages(self):
        """

        :returns AL::ALValue: 
        """
        return self.proxy.getPackages()

    @lazy_init
    def hasPackage(self, arg1):
        """

        :param str arg1: arg
        :returns bool: 
        """
        return self.proxy.hasPackage(arg1)

    @lazy_init
    def install(self, arg1):
        """

        :param str arg1: arg
        :returns bool: 
        """
        return self.proxy.install(arg1)

    @lazy_init
    def install2(self, arg1, arg2):
        """

        :param str arg1: arg
        :param str arg2: arg
        :returns int: 
        """
        return self.proxy.install(arg1, arg2)

    @lazy_init
    def install3(self, arg1, arg2, arg3):
        """

        :param str arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        :returns int: 
        """
        return self.proxy.install(arg1, arg2, arg3)

    @lazy_init
    def installCheckMd5(self, arg1, arg2):
        """

        :param str arg1: arg
        :param str arg2: arg
        :returns bool: 
        """
        return self.proxy.installCheckMd5(arg1, arg2)

    @lazy_init
    def package(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        return self.proxy.package(arg1)

    @lazy_init
    def package2(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        return self.proxy.package2(arg1)

    @lazy_init
    def packageIcon(self, arg1):
        """

        :param str arg1: arg
        :returns str: 
        """
        return self.proxy.packageIcon(arg1)

    @lazy_init
    def packages(self):
        """

        :returns std::vector<AL::ALValue>: 
        """
        return self.proxy.packages()

    @lazy_init
    def packages2(self):
        """

        :returns std::vector<AL::ALValue>: 
        """
        return self.proxy.packages2()

    @lazy_init
    def remove(self, arg1):
        """

        :param str arg1: arg
        :returns int: 
        """
        return self.proxy.remove(arg1)

    @lazy_init
    def removePkg(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.removePkg(arg1)

    @lazy_init
    def setServiceDirectory(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.setServiceDirectory(arg1)
