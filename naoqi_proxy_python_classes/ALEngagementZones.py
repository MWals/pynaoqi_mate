#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alengagementzonesproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALEngagementZones")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALEngagementZones(object):
    def __init__(self):
        self.proxy = None

    @lazy_init
    def computeEngagementZone(self, x, y, z):
        """Computes the engagement zone in which an object is from its position in FRAME_ROBOT

        :param float x: X coordinate of the object in FRAME_ROBOT
        :param float y: Y coordinate of the object in FRAME_ROBOT
        :param float z: Z coordinate of the object in FRAME_ROBOT
        :returns int: Engagement zone of the object
        """
        return self.proxy.computeEngagementZone(x, y, z)

    @lazy_init
    def computeEngagementZone2(self, xAngle, yAngle, distance, cameraPositionRobot):
        """Computes the engagement zone in which an object is from its anglular position in the camera image, its distance from the robot, and the position of the camera in FRAME_ROBOT

        :param float xAngle: X angular coordinate of the object in the image
        :param float yAngle: Y angular coordinate of the object in the image
        :param float distance: distance of the object from the robot
        :param AL::ALValue cameraPositionRobot: camera position in FRAME_ROBOT
        :returns int: Engagement zone of the object
        """
        return self.proxy.computeEngagementZone(xAngle, yAngle, distance, cameraPositionRobot)

    @lazy_init
    def getCurrentPeriod(self):
        """Gets the current period.

        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getCurrentPeriod()

    @lazy_init
    def getCurrentPrecision(self):
        """Gets the current precision.

        :returns float: Precision of the extractor.
        """
        return self.proxy.getCurrentPrecision()

    @lazy_init
    def getEventList(self):
        """Get the list of events updated in ALMemory.

        :returns std::vector<std::string>: Array of events updated by this extractor in ALMemory
        """
        return self.proxy.getEventList()

    @lazy_init
    def getFirstLimitDistance(self):
        """Get the first distance used for the delimitation of the engagement zones (nearest limit)

        :returns float: Current first distance (in meters) used for delimitation (nearest limit)
        """
        return self.proxy.getFirstLimitDistance()

    @lazy_init
    def getLimitAngle(self):
        """Get the angle used for the delimitation of the engagement zones

        :returns float: Current angle used for delimitation
        """
        return self.proxy.getLimitAngle()

    @lazy_init
    def getMemoryKeyList(self):
        """Get the list of events updated in ALMemory.

        :returns std::vector<std::string>: Array of events updated by this extractor in ALMemory
        """
        return self.proxy.getMemoryKeyList()

    @lazy_init
    def getMyPeriod(self, name):
        """Gets the period for a specific subscription.

        :param str name: Name of the module which has subscribed.
        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getMyPeriod(name)

    @lazy_init
    def getMyPrecision(self, name):
        """Gets the precision for a specific subscription.

        :param str name: name of the module which has subscribed
        :returns float: precision of the extractor
        """
        return self.proxy.getMyPrecision(name)

    @lazy_init
    def getOutputNames(self):
        """Get the list of values updated in ALMemory.

        :returns std::vector<std::string>: Array of values updated by this extractor in ALMemory
        """
        return self.proxy.getOutputNames()

    @lazy_init
    def getSecondLimitDistance(self):
        """Get the second distance used for the delimitation of the engagement zones (furthest limit)

        :returns float: Current second distance (in meters) used for delimitation (furthest limit)
        """
        return self.proxy.getSecondLimitDistance()

    @lazy_init
    def getSubscribersInfo(self):
        """Gets the parameters given by the module.

        :returns AL::ALValue: Array of names and parameters of all subscribers.
        """
        return self.proxy.getSubscribersInfo()

    @lazy_init
    def isPaused(self):
        """Gets extractor pause status

        :returns bool: True if the extractor is paused, False if not
        """
        return self.proxy.isPaused()

    @lazy_init
    def isProcessing(self):
        """Gets extractor running status

        :returns bool: True if the extractor is currently processing images, False if not
        """
        return self.proxy.isProcessing()

    @lazy_init
    def pause(self, status):
        """Changes the pause status of the extractor

        :param bool status: New pause satus
        """
        return self.proxy.pause(status)

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def setFirstLimitDistance(self, distance):
        """Set the first distance used for the delimitation of the engagement zones (nearest limit)

        :param float distance: New first distance (in meters) for delimitation (nearest limit), it should be positive and smaller than the second distance
        """
        return self.proxy.setFirstLimitDistance(distance)

    @lazy_init
    def setLimitAngle(self, angle):
        """Set the angle used for the delimitation of the engagement zones

        :param float angle: New angle (in degrees) for delimitation, it should be below 180
        """
        return self.proxy.setLimitAngle(angle)

    @lazy_init
    def setSecondLimitDistance(self, distance):
        """Set the second distance used for the delimitation of the engagement zones (furthest limit)

        :param float distance: New second distance (in meters) for delimitation (furthest limit), it should be positive and bigger than the first distance
        """
        return self.proxy.setSecondLimitDistance(distance)

    @lazy_init
    def subscribe(self, name, period, precision):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        :param int period: Refresh period (in milliseconds) if relevant.
        :param float precision: Precision of the extractor if relevant.
        """
        return self.proxy.subscribe(name, period, precision)

    @lazy_init
    def subscribe2(self, name):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        """
        return self.proxy.subscribe(name)

    @lazy_init
    def unsubscribe(self, name):
        """Unsubscribes from the extractor.

        :param str name: Name of the module which had subscribed.
        """
        return self.proxy.unsubscribe(name)

    @lazy_init
    def updatePeriod(self, name, period):
        """Updates the period if relevant.

        :param str name: Name of the module which has subscribed.
        :param int period: Refresh period (in milliseconds).
        """
        return self.proxy.updatePeriod(name, period)

    @lazy_init
    def updatePrecision(self, name, precision):
        """Updates the precision if relevant.

        :param str name: Name of the module which has subscribed.
        :param float precision: Precision of the extractor.
        """
        return self.proxy.updatePrecision(name, precision)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
