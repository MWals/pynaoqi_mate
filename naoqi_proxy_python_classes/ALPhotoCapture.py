#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alphotocaptureproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALPhotoCapture(object):
    def __init__(self):
        self.proxy = ALProxy("ALPhotoCapture")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getCameraID(self):
        """Returns current camera ID.

        :returns int: Current camera ID.
        """
        return self.proxy.getCameraID()

    def getCaptureInterval(self):
        """Returns current delay between captures.

        :returns int: Current delay (in ms) between two pictures.
        """
        return self.proxy.getCaptureInterval()

    def getColorSpace(self):
        """Returns current color space.

        :returns int: Current color space.
        """
        return self.proxy.getColorSpace()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getPictureFormat(self):
        """Returns current picture format.

        :returns str: Current picture format.
        """
        return self.proxy.getPictureFormat()

    def getResolution(self):
        """Returns current resolution.

        :returns int: Current frame resolution.
        """
        return self.proxy.getResolution()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def halfPress(self):
        """Manually (un)subscribes to ALVideoDevice.

        :returns bool: True if eveything went well, False otherwise.
        """
        return self.proxy.halfPress()

    def isHalfPressEnabled(self):
        """Returns True if the "half press" mode is on.

        :returns bool: True or False.
        """
        return self.proxy.isHalfPressEnabled()

    def isHalfPressed(self):
        """Returns True if the "half press" mode is on.

        :returns bool: True or False.
        """
        return self.proxy.isHalfPressed()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def setCameraID(self, cameraID):
        """Sets camera ID.

        :param int cameraID: ID of the camera to use.
        """
        return self.proxy.setCameraID(cameraID)

    def setCaptureInterval(self, captureInterval):
        """Sets delay between two captures.

        :param int captureInterval: New delay (in ms) between two pictures.
        """
        return self.proxy.setCaptureInterval(captureInterval)

    def setColorSpace(self, colorSpace):
        """Sets color space.

        :param int colorSpace: New color space.
        """
        return self.proxy.setColorSpace(colorSpace)

    def setHalfPressEnabled(self, enable):
        """Enables or disables the half-press mode.

        :param bool enable: True to enable, false to disable.
        """
        return self.proxy.setHalfPressEnabled(enable)

    def setPictureFormat(self, pictureFormat):
        """Sets picture extension.

        :param str pictureFormat: New extension used to save pictures.
        """
        return self.proxy.setPictureFormat(pictureFormat)

    def setResolution(self, resolution):
        """Sets resolution.

        :param int resolution: New frame resolution.
        """
        return self.proxy.setResolution(resolution)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def takePicture(self, folderPath, fileName):
        """Takes one picture.

        :param str folderPath: Folder where the picture is saved.
        :param str fileName: Filename used to save the picture.
        :returns AL::ALValue: Full file name of the picture saved on the disk: [filename]
        """
        return self.proxy.takePicture(folderPath, fileName)

    def takePicture2(self, folderPath, fileName, overwrite):
        """Takes one picture.

        :param str folderPath: Folder where the picture is saved.
        :param str fileName: Filename used to save the picture.
        :param bool overwrite: If false and the filename already exists, an error is thrown.
        :returns AL::ALValue: Full file name of the picture saved on the disk: [filename]
        """
        return self.proxy.takePicture(folderPath, fileName, overwrite)

    def takePictures(self, numberOfPictures, folderPath, fileName):
        """Takes several pictures as quickly as possible

        :param int numberOfPictures: Number of pictures to take
        :param str folderPath: Folder where the pictures are saved.
        :param str fileName: Filename used to save the pictures.
        :returns AL::ALValue: List of all saved files: [[filename1, filename2...]]
        """
        return self.proxy.takePictures(numberOfPictures, folderPath, fileName)

    def takePictures2(self, numberOfPictures, folderPath, fileName, overwrite):
        """Takes several pictures as quickly as possible

        :param int numberOfPictures: Number of pictures to take
        :param str folderPath: Folder where the pictures are saved.
        :param str fileName: Filename used to save the pictures.
        :param bool overwrite: If false and the filename already exists, an error is thrown.
        :returns AL::ALValue: List of all saved files: [[filename1, filename2...]]
        """
        return self.proxy.takePictures(numberOfPictures, folderPath, fileName, overwrite)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
