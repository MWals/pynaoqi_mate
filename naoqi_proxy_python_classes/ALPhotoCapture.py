#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alphotocaptureproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALPhotoCapture")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALPhotoCapture(object):
    def __init__(self):
        self.proxy = None

    @lazy_init
    def getCameraID(self):
        """Returns current camera ID.

        :returns int: Current camera ID.
        """
        return self.proxy.getCameraID()

    @lazy_init
    def getCaptureInterval(self):
        """Returns current delay between captures.

        :returns int: Current delay (in ms) between two pictures.
        """
        return self.proxy.getCaptureInterval()

    @lazy_init
    def getColorSpace(self):
        """Returns current color space.

        :returns int: Current color space.
        """
        return self.proxy.getColorSpace()

    @lazy_init
    def getPictureFormat(self):
        """Returns current picture format.

        :returns str: Current picture format.
        """
        return self.proxy.getPictureFormat()

    @lazy_init
    def getResolution(self):
        """Returns current resolution.

        :returns int: Current frame resolution.
        """
        return self.proxy.getResolution()

    @lazy_init
    def halfPress(self):
        """Manually (un)subscribes to ALVideoDevice.

        :returns bool: True if eveything went well, False otherwise.
        """
        return self.proxy.halfPress()

    @lazy_init
    def isHalfPressEnabled(self):
        """Returns True if the "half press" mode is on.

        :returns bool: True or False.
        """
        return self.proxy.isHalfPressEnabled()

    @lazy_init
    def isHalfPressed(self):
        """Returns True if the "half press" mode is on.

        :returns bool: True or False.
        """
        return self.proxy.isHalfPressed()

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def setCameraID(self, cameraID):
        """Sets camera ID.

        :param int cameraID: ID of the camera to use.
        """
        return self.proxy.setCameraID(cameraID)

    @lazy_init
    def setCaptureInterval(self, captureInterval):
        """Sets delay between two captures.

        :param int captureInterval: New delay (in ms) between two pictures.
        """
        return self.proxy.setCaptureInterval(captureInterval)

    @lazy_init
    def setColorSpace(self, colorSpace):
        """Sets color space.

        :param int colorSpace: New color space.
        """
        return self.proxy.setColorSpace(colorSpace)

    @lazy_init
    def setHalfPressEnabled(self, enable):
        """Enables or disables the half-press mode.

        :param bool enable: True to enable, false to disable.
        """
        return self.proxy.setHalfPressEnabled(enable)

    @lazy_init
    def setPictureFormat(self, pictureFormat):
        """Sets picture extension.

        :param str pictureFormat: New extension used to save pictures.
        """
        return self.proxy.setPictureFormat(pictureFormat)

    @lazy_init
    def setResolution(self, resolution):
        """Sets resolution.

        :param int resolution: New frame resolution.
        """
        return self.proxy.setResolution(resolution)

    @lazy_init
    def takePicture(self, folderPath, fileName):
        """Takes one picture.

        :param str folderPath: Folder where the picture is saved.
        :param str fileName: Filename used to save the picture.
        :returns AL::ALValue: Full file name of the picture saved on the disk: [filename]
        """
        return self.proxy.takePicture(folderPath, fileName)

    @lazy_init
    def takePicture2(self, folderPath, fileName, overwrite):
        """Takes one picture.

        :param str folderPath: Folder where the picture is saved.
        :param str fileName: Filename used to save the picture.
        :param bool overwrite: If false and the filename already exists, an error is thrown.
        :returns AL::ALValue: Full file name of the picture saved on the disk: [filename]
        """
        return self.proxy.takePicture(folderPath, fileName, overwrite)

    @lazy_init
    def takePictures(self, numberOfPictures, folderPath, fileName):
        """Takes several pictures as quickly as possible

        :param int numberOfPictures: Number of pictures to take
        :param str folderPath: Folder where the pictures are saved.
        :param str fileName: Filename used to save the pictures.
        :returns AL::ALValue: List of all saved files: [[filename1, filename2...]]
        """
        return self.proxy.takePictures(numberOfPictures, folderPath, fileName)

    @lazy_init
    def takePictures2(self, numberOfPictures, folderPath, fileName, overwrite):
        """Takes several pictures as quickly as possible

        :param int numberOfPictures: Number of pictures to take
        :param str folderPath: Folder where the pictures are saved.
        :param str fileName: Filename used to save the pictures.
        :param bool overwrite: If false and the filename already exists, an error is thrown.
        :returns AL::ALValue: List of all saved files: [[filename1, filename2...]]
        """
        return self.proxy.takePictures(numberOfPictures, folderPath, fileName, overwrite)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
