#!/usr/bin/env python
# Class autogenerated from ./alconnectionmanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALConnectionManager(object):
    def __init__(self):
        self.proxy = ALProxy("ALConnectionManager")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def connect(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.connect(arg1)

    def countries(self):
        """

        :returns std::vector<std::string>: 
        """
        return self.proxy.countries()

    def country(self):
        """

        :returns str: 
        """
        return self.proxy.country()

    def disableTethering(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.disableTethering(arg1)

    def disconnect(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.disconnect(arg1)

    def enableTethering(self, arg1, arg2, arg3):
        """

        :param str arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        """
        return self.proxy.enableTethering(arg1, arg2, arg3)

    def enableTethering(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.enableTethering(arg1)

    def forget(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.forget(arg1)

    def getTetheringEnable(self, arg1):
        """

        :param str arg1: arg
        :returns bool: 
        """
        return self.proxy.getTetheringEnable(arg1)

    def interfaces(self):
        """

        :returns AL::ALValue: 
        """
        return self.proxy.interfaces()

    def scan(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.scan(arg1)

    def scan(self):
        """
        """
        return self.proxy.scan()

    def service(self, arg1):
        """

        :param str arg1: arg
        :returns AL::ALValue: 
        """
        return self.proxy.service(arg1)

    def services(self):
        """

        :returns AL::ALValue: 
        """
        return self.proxy.services()

    def setCountry(self, arg1):
        """

        :param str arg1: arg
        """
        return self.proxy.setCountry(arg1)

    def setServiceConfiguration(self, arg1):
        """

        :param AL::ALValue arg1: arg
        """
        return self.proxy.setServiceConfiguration(arg1)

    def setServiceInput(self, arg1):
        """

        :param AL::ALValue arg1: arg
        """
        return self.proxy.setServiceInput(arg1)

    def state(self):
        """

        :returns str: 
        """
        return self.proxy.state()

    def technologies(self):
        """

        :returns AL::ALValue: 
        """
        return self.proxy.technologies()

    def tetheringName(self, arg1):
        """

        :param str arg1: arg
        :returns str: 
        """
        return self.proxy.tetheringName(arg1)

    def tetheringPassphrase(self, arg1):
        """

        :param str arg1: arg
        :returns str: 
        """
        return self.proxy.tetheringPassphrase(arg1)
