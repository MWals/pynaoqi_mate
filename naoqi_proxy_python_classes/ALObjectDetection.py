#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alobjectdetectionproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALObjectDetection(object):
    def __init__(self):
        self.proxy = ALProxy("ALObjectDetection")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def analyzeFile(self, strImageFilename):
        """Detect things from image file, using previously set cascade

        :param str strImageFilename: filename containing file
        :returns AL::ALValue: list of found area: [[x,y,w,h],neighbours,[headX,headY],(strCreatedCroppedFilename, empty or None if not applicable),(opencv image pointer (not dev)(empty or NONE))] neighbours give an idea of the confidence, it's an int roughly in [0..60]. strCreatedCroppedFilename: filename created containing objects (see saveDetected).
        """
        return self.proxy.analyzeFile(strImageFilename)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getActiveCamera(self):
        """

        :returns int: 
        """
        return self.proxy.getActiveCamera()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getCascadeFile(self):
        """Returns the filename of the cascade file used for detection.

        :returns AL::ALValue: Name of the cascade file.
        """
        return self.proxy.getCascadeFile()

    def getCropMargin(self):
        """Returns the crop margins currently set for saving the detected objects' images.

        :returns AL::ALValue: 
        """
        return self.proxy.getCropMargin()

    def getCurrentPeriod(self):
        """Gets the current period.

        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getCurrentPeriod()

    def getCurrentPrecision(self):
        """Gets the current precision.

        :returns float: Precision of the extractor.
        """
        return self.proxy.getCurrentPrecision()

    def getFrameRate(self):
        """

        :returns int: 
        """
        return self.proxy.getFrameRate()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getMinNeighbors(self):
        """Returns the minimum number of neighbors set for the algorithm.

        :returns AL::ALValue: 
        """
        return self.proxy.getMinNeighbors()

    def getMinSize(self):
        """Returns the minimum object size currently set for detection

        :returns AL::ALValue: Minimum horizontal and vertical size
        """
        return self.proxy.getMinSize()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getMyPeriod(self, name):
        """Gets the period for a specific subscription.

        :param str name: Name of the module which has subscribed.
        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getMyPeriod(name)

    def getMyPrecision(self, name):
        """Gets the precision for a specific subscription.

        :param str name: name of the module which has subscribed
        :returns float: precision of the extractor
        """
        return self.proxy.getMyPrecision(name)

    def getOutputNames(self):
        """Get the list of values updated in ALMemory.

        :returns std::vector<std::string>: Array of values updated by this extractor in ALMemory
        """
        return self.proxy.getOutputNames()

    def getResolution(self):
        """

        :returns int: 
        """
        return self.proxy.getResolution()

    def getSavePath(self):
        """Returns the path currently set for saving the detected objects' images.

        :returns AL::ALValue: Path where to save images.
        """
        return self.proxy.getSavePath()

    def getScaleFactor(self):
        """Returns used scale factor.

        :returns AL::ALValue: Used scale factor.
        """
        return self.proxy.getScaleFactor()

    def getSubscribersInfo(self):
        """Gets the parameters given by the module.

        :returns AL::ALValue: Array of names and parameters of all subscribers.
        """
        return self.proxy.getSubscribersInfo()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isDebugEnabled(self):
        """Returns true if debug is enabled, else returns false

        :returns AL::ALValue: 
        """
        return self.proxy.isDebugEnabled()

    def isPaused(self):
        """

        :returns bool: 
        """
        return self.proxy.isPaused()

    def isProcessing(self):
        """

        :returns bool: 
        """
        return self.proxy.isProcessing()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def isSavingEnabled(self):
        """Returns true if saving is enabled, else returns false

        :returns AL::ALValue: 
        """
        return self.proxy.isSavingEnabled()

    def pause(self, status):
        """

        :param bool status: arg
        """
        return self.proxy.pause(status)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def setActiveCamera(self, cameraID):
        """

        :param int cameraID: arg
        :returns bool: 
        """
        return self.proxy.setActiveCamera(cameraID)

    def setCascadeFile(self, strCascadeFilename):
        """set the cascade file to use

        :param str strCascadeFilename: arg
        """
        return self.proxy.setCascadeFile(strCascadeFilename)

    def setCropMargin(self, nCropWidthMargin, nCropHeightMargin):
        """Set the crop margins for saving the detected objects' images.

        :param int nCropWidthMargin: Margin around object (default: 16)
        :param int nCropHeightMargin: (default:40)
        """
        return self.proxy.setCropMargin(nCropWidthMargin, nCropHeightMargin)

    def setDebugEnabled(self, bNewState):
        """Enable some outputting, helping testing and understanding.

        :param bool bNewState: true to enable debug mode.
        """
        return self.proxy.setDebugEnabled(bNewState)

    def setFrameRate(self, value):
        """

        :param int value: arg
        :returns bool: 
        """
        return self.proxy.setFrameRate(value)

    def setMinNeighbors(self, nMinNeighbors):
        """Sets the minimum number of underlying detections (acts like a confidence threshold)

        :param int nMinNeighbors: new parameter to use (default: 2)
        """
        return self.proxy.setMinNeighbors(nMinNeighbors)

    def setMinSize(self, nMinSizeX, nMinSizeY):
        """Sets the minimum object size for detection

        :param int nMinSizeX: Horizontal size
        :param int nMinSizeY: Vertical size
        """
        return self.proxy.setMinSize(nMinSizeX, nMinSizeY)

    def setResolution(self, resolution):
        """

        :param int resolution: arg
        :returns bool: 
        """
        return self.proxy.setResolution(resolution)

    def setSavePath(self, strDestinationPath):
        """Set the path where to save the detected objects' images.

        :param str strDestinationPath: Path where to save images.
        """
        return self.proxy.setSavePath(strDestinationPath)

    def setSavingEnabled(self, bNewState):
        """Enable or disable the saving of each detected object's image.

        :param bool bNewState: true to enable saving images.
        """
        return self.proxy.setSavingEnabled(bNewState)

    def setScaleFactor(self, rScaleFactor):
        """change some cascade parameter(s) (will be updated on the fly on next frame)

        :param float rScaleFactor: new parameter to use
        """
        return self.proxy.setScaleFactor(rScaleFactor)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def subscribe(self, name, period, precision):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        :param int period: Refresh period (in milliseconds) if relevant.
        :param float precision: Precision of the extractor if relevant.
        """
        return self.proxy.subscribe(name, period, precision)

    def subscribe2(self, name):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        """
        return self.proxy.subscribe(name)

    def unsubscribe(self, name):
        """Unsubscribes from the extractor.

        :param str name: Name of the module which had subscribed.
        """
        return self.proxy.unsubscribe(name)

    def updatePeriod(self, name, period):
        """Updates the period if relevant.

        :param str name: Name of the module which has subscribed.
        :param int period: Refresh period (in milliseconds).
        """
        return self.proxy.updatePeriod(name, period)

    def updatePrecision(self, name, precision):
        """Updates the precision if relevant.

        :param str name: Name of the module which has subscribed.
        :param float precision: Precision of the extractor.
        """
        return self.proxy.updatePrecision(name, precision)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
