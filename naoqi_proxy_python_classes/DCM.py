#!/usr/bin/env python
# Class autogenerated from ./dcmproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class DCM(object):
    def __init__(self):
        self.proxy = ALProxy("DCM")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def calibration(self, calibrationInput):
        """Calibration of a joint

        :param AL::ALValue calibrationInput: A complex ALValue. See red documentation
        """
        return self.proxy.calibration(calibrationInput)

    def createAlias(self, alias):
        """Create or change an alias (list of actuators)

        :param AL::ALValue alias: Alias name and description
        :returns AL::ALValue: Same as pParams, but with the name removed if the actuator is not found
        """
        return self.proxy.createAlias(alias)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getPrefix(self):
        """Return the STM base name

        :returns AL::ALValue: the STM base name for all device/sensors (1st string in the array) and all devices (2nd string in the array)
        """
        return self.proxy.getPrefix()

    def getTime(self, offset):
        """Return the DCM time

        :param int offset: optional time in ms (signed) to add/remove
        :returns int: An integer (could be signed) with the DCM time
        """
        return self.proxy.getTime(offset)

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def preferences(self, action, target, keyName, keyValue):
        """Save updated value from DCM in XML pref file

        :param str action: string : 'Save' 'Load' 'Add'
        :param str target: string : 'Chest' 'Head' 'Main' 'All'
        :param str keyName: The name of the key if action = 'Add'.
        :param AL::ALValue keyValue: The ALVAlue of the key to add
        :returns int: Nothing
        """
        return self.proxy.preferences(action, target, keyName, keyValue)

    def set(self, commands):
        """Call this function to send a timed-command list to an actuator

        :param AL::ALValue commands: AL::ALValue with all data
        """
        return self.proxy.set(commands)

    def setAlias(self, commands):
        """Call this function to send timed-command list to an alias (list of actuators)

        :param AL::ALValue commands: AL::ALValue with all data
        """
        return self.proxy.setAlias(commands)

    def setAlias(self, name, time, commands):
        """Call this function to send timed-command list to an alias (list of actuators) with "ClearAll" merge startegy

        :param str name: alias name
        :param int time: time for the timed command
        :param std::vector<float> commands: std::vector<float> with all commands
        """
        return self.proxy.setAlias(name, time, commands)

    def special(self, result):
        """Special DCM commands

        :param str result: one string and could be Reset, Version, Chain, Diagnostic, Config
        """
        return self.proxy.special(result)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
