#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alanimatedspeechproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALAnimatedSpeech(object):
    def __init__(self):
        self.proxy = ALProxy("ALAnimatedSpeech")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def addTagsToWords(self, tagsToWords):
        """Add some new links between tags and words.

        :param AL::ALValue tagsToWords: Map of tags to words.
        """
        return self.proxy.addTagsToWords(tagsToWords)

    def declareAnimationsPackage(self, animationsPackage):
        """Add a new package that contains animations.

        :param str animationsPackage: The new package that contains animations.
        """
        return self.proxy.declareAnimationsPackage(animationsPackage)

    def declareTagForAnimations(self, tagsToAnimations):
        """Declare some tags with the associated animations.

        :param AL::ALValue tagsToAnimations: Map of Tags to Animations.
        """
        return self.proxy.declareTagForAnimations(tagsToAnimations)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBodyLanguageMode(self):
        """Set the current body language mode. 3 modes exist: BODY_LANGUAGE_MODE_DISABLED,BODY_LANGUAGE_MODE_RANDOM and BODY_LANGUAGE_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details)

        :returns qi::uint32_t: The current body language mode.
        """
        return self.proxy.getBodyLanguageMode()

    def getBodyLanguageModeToStr(self):
        """Set the current body language mode. 3 modes exist: "disabled", "random" and "contextual" (see BodyLanguageMode enum for more details)

        :returns str: The current body language mode.
        """
        return self.proxy.getBodyLanguageModeToStr()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isBodyLanguageEnabled(self):
        """DEPRECATED since 1.22: use getBodyLanguageMode instead.Indicate if the body language is enabled or not.

        :returns bool: The boolean value: true means it is enabled, false means it is disabled.
        """
        return self.proxy.isBodyLanguageEnabled()

    def isBodyTalkEnabled(self):
        """DEPRECATED since 1.18: use getBodyLanguageMode instead.Indicate if the body talk is enabled or not.

        :returns bool: The boolean value: true means it is enabled, false means it is disabled.
        """
        return self.proxy.isBodyTalkEnabled()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def say(self, text):
        """Say the annotated text given in parameter and animate it with animations inserted in the text.

        :param str text: An annotated text (for example: "Hello. ^start(Hey_1) My name is NAO").
        """
        return self.proxy.say(text)

    def say2(self, text, configuration):
        """Say the annotated text given in parameter and animate it with animations inserted in the text.

        :param str text: An annotated text (for example: "Hello. ^start(Hey_1) My name is NAO").
        :param AL::ALValue configuration: The animated speech configuration.
        """
        return self.proxy.say(text, configuration)

    def setBodyLanguageEnabled(self, enable):
        """DEPRECATED since 1.22: use setBodyLanguageMode instead.Enable or disable the automatic body language on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.

        :param bool enable: The boolean value: true to enable, false to disable.
        """
        return self.proxy.setBodyLanguageEnabled(enable)

    def setBodyLanguageMode(self, bodyLanguageMode):
        """Set the current body language mode. 3 modes exist: BODY_LANGUAGE_MODE_DISABLED,BODY_LANGUAGE_MODE_RANDOM and BODY_LANGUAGE_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details)

        :param qi::uint32_t bodyLanguageMode: The choosen body language mode.
        """
        return self.proxy.setBodyLanguageMode(bodyLanguageMode)

    def setBodyLanguageModeFromStr(self, stringBodyLanguageMode):
        """Set the current body language mode. 3 modes exist: "disabled", "random" and "contextual" (see BodyLanguageMode enum for more details)

        :param str stringBodyLanguageMode: The choosen body language mode.
        """
        return self.proxy.setBodyLanguageModeFromStr(stringBodyLanguageMode)

    def setBodyTalkEnabled(self, enable):
        """DEPRECATED since 1.18: use setBodyLanguageMode instead.Enable or disable the automatic body talk on the speech.If it is enabled, anywhere you have not annotate your text with animation,the robot will fill the gap with automatically calculated gestures.If it is disabled, the robot will move only where you annotate it withanimations.

        :param bool enable: The boolean value: true to enable, false to disable.
        """
        return self.proxy.setBodyTalkEnabled(enable)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
