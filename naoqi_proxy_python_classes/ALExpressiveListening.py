#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alexpressivelisteningproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALExpressiveListening(object):
    def __init__(self):
        self.proxy = ALProxy("ALExpressiveListening")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getParameter(self, parameter):
        """Get the specified parameter.

        :param str parameter: Name of the parameter.  "MinTimeBeforeFirstNod" : Minimum time (in seconds) before first nod.  "MaxTimeBeforeFirstNod" : Maximum time (in seconds) before first nod.  "MinTimeBetweenNods" : Minimum time (in seconds) between two nods.  "MaxTimeBetweenNods" : Maximum time (in seconds) between two nods.  "SpeedNods" : Speed of head moves when nodding  "SpeedServoing" : Speed of head moves when servoing.  "FrameRateTracking3D" : 3D tracking's framerate.  "FrameRateTracking2D" : 2D tracking's framerate.  "NobodyFoundTimeOut" : timeout to send peopleLeft event when no blob isfound  "AmplitudeNod" : amplitude of the nod (angle made by Up and Down positions), in degree  "AmplitudeYawTracking" : max absolute value for head yaw in tracking, in degrees
        :returns AL::ALValue: ALValue format for required parameter
        """
        return self.proxy.getParameter(parameter)

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isListening(self):
        """Get the status (started or not) of the module.

        :returns bool: 
        """
        return self.proxy.isListening()

    def isNoddingEnabled(self):
        """Get status enabled/disabled for Nodding

        :returns bool: Boolean value for status enabled/disabled
        """
        return self.proxy.isNoddingEnabled()

    def isPaused(self):
        """Get the pause status of the module.

        :returns bool: 
        """
        return self.proxy.isPaused()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def isTracking3DEnabled(self):
        """Get status enabled/disabled for tracking.

        :returns bool: Boolean value for status enabled/disabled
        """
        return self.proxy.isTracking3DEnabled()

    def pauseListening(self):
        """Pause Expressive Listening.
        """
        return self.proxy.pauseListening()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def resumeListening(self):
        """Resume Expressive Listening.
        """
        return self.proxy.resumeListening()

    def setNoddingEnabled(self, enable):
        """Enable/Disable nodding.

        :param bool enable: Boolean value: true to enable, false to disable.
        """
        return self.proxy.setNoddingEnabled(enable)

    def setParameter(self, parameter, value):
        """Set the specified parameter.

        :param str parameter: Name of the parameter.  "MinTimeBeforeFirstNod" : Minimum time (in seconds) before first nod.  "MaxTimeBeforeFirstNod" : Maximum time (in seconds) before first nod.  "MinTimeBetweenNods" : Minimum time (in seconds) between two nods.  "MaxTimeBetweenNods" : Maximum time (in seconds) between two nods.  "SpeedNods" : Speed of head moves when nodding  "SpeedServoing" : Speed of head moves when servoing.  "FrameRateTracking3D" : 3D tracking's framerate.  "FrameRateTracking2D" : 2D tracking's framerate.  "NobodyFoundTimeOut" : timeout to send peopleLeft event when no blob isfound  "AmplitudeNod" : amplitude of the nod (angle made by Up and Down positions), in degree  "AmplitudeYawTracking" : max absolute value for head yaw in tracking, in degrees
        :param AL::ALValue value: "MinTimeBeforeFirstNod" : Float in range [0;5]  "MaxTimeBeforeFirstNod" : Float in range [0;5]  "MinTimeBetweenNods" : Float in range [0;5]  "MaxTimeBetweenNods" : Float in range [0;5]  "SpeedNods" : Float in range [0;1]  "SpeedServoing" : Float in range [0;1]  "FrameRateTracking3D" : Float in range [0.1;30]  "FrameRateTracking2D" : Float in range [0.1;30]  "NobodyFoundTimeOut" : Float > 0  "AmplitudeNod" : Float in range [0;45]  "AmplitudeYawTracking" : Float in range [10;120]
        """
        return self.proxy.setParameter(parameter, value)

    def setTracking3DEnabled(self, enable):
        """Enable/Disable tracking.

        :param bool enable: Boolean value: true to enable, false to disable.
        """
        return self.proxy.setTracking3DEnabled(enable)

    def startListening(self):
        """Start Expressive Listening.
        """
        return self.proxy.startListening()

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopListening(self):
        """Stop Expressive Listening.
        """
        return self.proxy.stopListening()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
