#!/usr/bin/env python
# Class autogenerated from ./alfilemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALFileManager(object):
    def __init__(self):
        self.proxy = ALProxy("ALFileManager")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def dataFileExists(self, fileName):
        """Try to find if this file does exist on robot or not.

        :param str fileName: Name of the module associate to the preference.
        :returns bool: True upon success
        """
        return self.proxy.dataFileExists(fileName)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def fileExists(self, fileName):
        """Try to find if this file does exist on robot or not.

        :param str fileName: Name of the module associate to the preference.
        :returns bool: True upon success
        """
        return self.proxy.fileExists(fileName)

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getFileCompletePath(self, prefs):
        """Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.

        :param str prefs: array reprenting the whole file.
        :returns str: True upon success
        """
        return self.proxy.getFileCompletePath(prefs)

    def getFileContents(self, prefs):
        """Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.

        :param str prefs: array reprenting the whole file.
        :returns AL::ALValue: True upon success
        """
        return self.proxy.getFileContents(prefs)

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getSystemSharedFolderPath(self):
        """Get the current system shared folder path.

        :returns str: System shared folder path string.
        """
        return self.proxy.getSystemSharedFolderPath()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def getUserSharedFolderPath(self):
        """Get the current user shared folder path.

        :returns str: User shared folder path string.
        """
        return self.proxy.getUserSharedFolderPath()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def setUserSharedFolderPath(self, fileName):
        """Set a new value of the user shared folder path.

        :param str fileName: Name of the module associate to the preference.
        """
        return self.proxy.setUserSharedFolderPath(fileName)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
