#!/usr/bin/env python
# Class autogenerated from ./aldialogproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALDialog(object):
    def __init__(self):
        self.proxy = ALProxy("ALDialog")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def activateTag(self, arg1, arg2):
        """activate a tag

        :param str arg1: arg
        :param str arg2: arg
        """
        return self.proxy.activateTag(arg1, arg2)

    def activateTopic(self, arg1):
        """Activate a topic

        :param str arg1: arg
        """
        return self.proxy.activateTopic(arg1)

    def addBlockingEvent(self, arg1):
        """Callback when speech recognition recognized a word

        :param str arg1: arg
        """
        return self.proxy.addBlockingEvent(arg1)

    def applicationBlackList(self, arg1):
        """Black list a list of application

        :param std::vector<std::string> arg1: arg
        """
        return self.proxy.applicationBlackList(arg1)

    def clearConcepts(self):
        """clear concepts in DB
        """
        return self.proxy.clearConcepts()

    def closeSession(self):
        """Close the session
        """
        return self.proxy.closeSession()

    def compilationFinished(self, arg1, arg2, arg3):
        """compilationFinished

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.compilationFinished(arg1, arg2, arg3)

    def compileAll(self):
        """compile all for ASR
        """
        return self.proxy.compileAll()

    def connectionChanged(self, arg1, arg2, arg3):
        """Callback when remote connection changes

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.connectionChanged(arg1, arg2, arg3)

    def controlEngine(self, arg1, arg2):
        """controlEngine

        :param str arg1: arg
        :param str arg2: arg
        :returns std::vector<std::string>: 
        """
        return self.proxy.controlEngine(arg1, arg2)

    def deactivateTag(self, arg1, arg2):
        """deactivate a tag

        :param str arg1: arg
        :param str arg2: arg
        """
        return self.proxy.deactivateTag(arg1, arg2)

    def deactivateTopic(self, arg1):
        """Activate a topic

        :param str arg1: arg
        """
        return self.proxy.deactivateTopic(arg1)

    def deleteSerializationFiles(self):
        """delete serializations files .ser .ini .bnf .lcf
        """
        return self.proxy.deleteSerializationFiles()

    def enableCategory(self, arg1):
        """enableCategory

        :param bool arg1: arg
        """
        return self.proxy.enableCategory(arg1)

    def enableLogAudio(self, arg1):
        """enable sending log audio (recorded conversation) to the cloud

        :param bool arg1: arg
        """
        return self.proxy.enableLogAudio(arg1)

    def enableSendingLogToCloud(self, arg1):
        """let the robot send log the cloud

        :param bool arg1: arg
        """
        return self.proxy.enableSendingLogToCloud(arg1)

    def enableTriggerSentences(self, arg1):
        """enableTriggerSentences

        :param bool arg1: arg
        """
        return self.proxy.enableTriggerSentences(arg1)

    def endOfUtteranceCallback(self):
        """End of utterance callback

        :returns bool: 
        """
        return self.proxy.endOfUtteranceCallback()

    def eventReceived(self, arg1, arg2, arg3):
        """Callback when dialog received a event

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.eventReceived(arg1, arg2, arg3)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def forceInput(self, arg1):
        """Give a sentence to the dialog and get the answer

        :param str arg1: arg
        """
        return self.proxy.forceInput(arg1)

    def forceOutput(self):
        """Get a proposal
        """
        return self.proxy.forceOutput()

    def generateSentences(self, arg1, arg2, arg3):
        """Generate sentences

        :param str arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        """
        return self.proxy.generateSentences(arg1, arg2, arg3)

    def getASRConfidenceThreshold(self):
        """Get the minimum confidence required to recognize words

        :returns float: 
        """
        return self.proxy.getASRConfidenceThreshold()

    def getActivatedTopics(self):
        """Get activated topics

        :returns std::vector<std::string>: 
        """
        return self.proxy.getActivatedTopics()

    def getAllLoadedTopics(self):
        """Load precompiled file

        :returns std::vector<std::string>: 
        """
        return self.proxy.getAllLoadedTopics()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getCurrentPeriod(self):
        """Gets the current period.

        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getCurrentPeriod()

    def getCurrentPrecision(self):
        """Gets the current precision.

        :returns float: Precision of the extractor.
        """
        return self.proxy.getCurrentPrecision()

    def getEventList(self):
        """Get the list of events updated in ALMemory.

        :returns std::vector<std::string>: Array of events updated by this extractor in ALMemory
        """
        return self.proxy.getEventList()

    def getFocus(self):
        """Give focus to a dialog

        :returns str: 
        """
        return self.proxy.getFocus()

    def getLoadedTopics(self, arg1):
        """Load precompiled file

        :param str arg1: arg
        :returns std::vector<std::string>: 
        """
        return self.proxy.getLoadedTopics(arg1)

    def getMemoryKeyList(self):
        """Get the list of events updated in ALMemory.

        :returns std::vector<std::string>: Array of events updated by this extractor in ALMemory
        """
        return self.proxy.getMemoryKeyList()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getMyPeriod(self, name):
        """Gets the period for a specific subscription.

        :param str name: Name of the module which has subscribed.
        :returns int: Refresh period (in milliseconds).
        """
        return self.proxy.getMyPeriod(name)

    def getMyPrecision(self, name):
        """Gets the precision for a specific subscription.

        :param str name: name of the module which has subscribed
        :returns float: precision of the extractor
        """
        return self.proxy.getMyPrecision(name)

    def getOutputNames(self):
        """Get the list of values updated in ALMemory.

        :returns std::vector<std::string>: Array of values updated by this extractor in ALMemory
        """
        return self.proxy.getOutputNames()

    def getSubscribersInfo(self):
        """Gets the parameters given by the module.

        :returns AL::ALValue: Array of names and parameters of all subscribers.
        """
        return self.proxy.getSubscribersInfo()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def getUserData(self, arg1, arg2):
        """get user data from dialog database

        :param str arg1: arg
        :param int arg2: arg
        :returns str: 
        """
        return self.proxy.getUserData(arg1, arg2)

    def getUserDataList(self, arg1):
        """get user data list from dialog database

        :param int arg1: arg
        :returns std::vector<std::string>: 
        """
        return self.proxy.getUserDataList(arg1)

    def getUserList(self):
        """get user list from dialog database

        :returns std::vector<int>: 
        """
        return self.proxy.getUserList()

    def gotoTag(self, arg1, arg2):
        """Callback when ASR status changes

        :param str arg1: arg
        :param str arg2: arg
        """
        return self.proxy.gotoTag(arg1, arg2)

    def gotoTopic(self, arg1):
        """Set the focus to a topic and make a proposal

        :param str arg1: arg
        """
        return self.proxy.gotoTopic(arg1)

    def insertUserData(self, arg1, arg2, arg3):
        """insert user data into dialog database

        :param str arg1: arg
        :param str arg2: arg
        :param int arg3: arg
        """
        return self.proxy.insertUserData(arg1, arg2, arg3)

    def isContentNeedsUpdate(self):
        """True if new content was installed

        :returns bool: 
        """
        return self.proxy.isContentNeedsUpdate()

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def isSendingLogToCloud(self):
        """check if the robot is sending the log to the cloud

        :returns bool: 
        """
        return self.proxy.isSendingLogToCloud()

    def loadTopic(self, arg1):
        """Load a topic

        :param str arg1: arg
        :returns str: 
        """
        return self.proxy.loadTopic(arg1)

    def noPick(self, arg1):
        """noPick

        :param str arg1: arg
        """
        return self.proxy.noPick(arg1)

    def openSession(self, arg1):
        """Open a session

        :param int arg1: arg
        """
        return self.proxy.openSession(arg1)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def packageInstalled(self, arg1, arg2, arg3):
        """packageInstalled

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.packageInstalled(arg1, arg2, arg3)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def releaseEngine(self):
        """releaseEngine
        """
        return self.proxy.releaseEngine()

    def removeUserData(self, arg1):
        """remove a user from the database

        :param int arg1: arg
        """
        return self.proxy.removeUserData(arg1)

    def resetAll(self):
        """fallback
        """
        return self.proxy.resetAll()

    def runDialog(self):
        """run main dialog
        """
        return self.proxy.runDialog()

    def setASRConfidenceThreshold(self, arg1):
        """Set the minimum confidence required to recognize words

        :param float arg1: arg
        """
        return self.proxy.setASRConfidenceThreshold(arg1)

    def setAnimatedSpeechConfiguration(self, arg1):
        """Set the configuration of animated speech for the current dialog.

        :param AL::ALValue arg1: arg
        """
        return self.proxy.setAnimatedSpeechConfiguration(arg1)

    def setConcept(self, conceptName, language, content):
        """Set the content of a dynamic concept

        :param str conceptName: Name of the concept
        :param str language: Language of the concept
        :param std::vector<std::string> content: content of the concept
        """
        return self.proxy.setConcept(conceptName, language, content)

    def setConcept(self, conceptName, language, content, store):
        """Set the content of a dynamic concept

        :param str conceptName: Name of the concept
        :param str language: Language of the concept
        :param std::vector<std::string> content: content of the concept
        :param bool store: determine if the concept will be save in the database
        """
        return self.proxy.setConcept(conceptName, language, content, store)

    def setConceptKeepInCache(self, arg1, arg2, arg3):
        """set the content of a dynamic concept

        :param str arg1: arg
        :param str arg2: arg
        :param std::vector<std::string> arg3: arg
        """
        return self.proxy.setConceptKeepInCache(arg1, arg2, arg3)

    def setDelay(self, arg1, arg2):
        """change event's delay

        :param str arg1: arg
        :param int arg2: arg
        """
        return self.proxy.setDelay(arg1, arg2)

    def setFocus(self, arg1):
        """Give focus to a dialog

        :param str arg1: arg
        """
        return self.proxy.setFocus(arg1)

    def setLanguage(self, arg1):
        """setLanguage

        :param str arg1: arg
        """
        return self.proxy.setLanguage(arg1)

    def setNumberOfScopes(self, arg1):
        """Set how many scopes remains open

        :param int arg1: arg
        """
        return self.proxy.setNumberOfScopes(arg1)

    def setPushMode(self, arg1):
        """Set push mode

        :param int arg1: arg
        """
        return self.proxy.setPushMode(arg1)

    def setVariablePath(self, arg1, arg2, arg3):
        """setVariablePath

        :param str arg1: arg
        :param str arg2: arg
        :param str arg3: arg
        """
        return self.proxy.setVariablePath(arg1, arg2, arg3)

    def startApp(self, arg1, arg2, arg3):
        """startUpdate

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.startApp(arg1, arg2, arg3)

    def startPush(self):
        """Start push mode
        """
        return self.proxy.startPush()

    def startUpdate(self, arg1, arg2, arg3):
        """startUpdate

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.startUpdate(arg1, arg2, arg3)

    def statusChanged(self, arg1, arg2, arg3):
        """Callback when ASR status changes

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.statusChanged(arg1, arg2, arg3)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopDialog(self):
        """stop main dialog
        """
        return self.proxy.stopDialog()

    def stopPush(self):
        """Stop push mode
        """
        return self.proxy.stopPush()

    def subscribe(self, name, period, precision):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        :param int period: Refresh period (in milliseconds) if relevant.
        :param float precision: Precision of the extractor if relevant.
        """
        return self.proxy.subscribe(name, period, precision)

    def subscribe(self, name):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        """
        return self.proxy.subscribe(name)

    def tell(self, arg1):
        """Give a sentence to the dialog and get the answer

        :param str arg1: arg
        """
        return self.proxy.tell(arg1)

    def unloadTopic(self, arg1):
        """unload a dialog

        :param str arg1: arg
        """
        return self.proxy.unloadTopic(arg1)

    def unsubscribe(self, name):
        """Unsubscribes from the extractor.

        :param str name: Name of the module which had subscribed.
        """
        return self.proxy.unsubscribe(name)

    def updatePeriod(self, name, period):
        """Updates the period if relevant.

        :param str name: Name of the module which has subscribed.
        :param int period: Refresh period (in milliseconds).
        """
        return self.proxy.updatePeriod(name, period)

    def updatePrecision(self, name, precision):
        """Updates the precision if relevant.

        :param str name: Name of the module which has subscribed.
        :param float precision: Precision of the extractor.
        """
        return self.proxy.updatePrecision(name, precision)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)

    def wordRecognized(self, arg1, arg2, arg3):
        """Callback when speech recognition recognized a word

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.wordRecognized(arg1, arg2, arg3)

    def wordsRecognizedCallback(self, arg1, arg2):
        """Get loaded dialog list

        :param AL::ALValue arg1: arg
        :param int arg2: arg
        """
        return self.proxy.wordsRecognizedCallback(arg1, arg2)
