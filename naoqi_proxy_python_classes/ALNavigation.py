#!/usr/bin/env python
# Class autogenerated from ./alnavigationproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALNavigation(object):
    def __init__(self):
        self.proxy = ALProxy("ALNavigation")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getSecurityDistance(self):
        """Distance in meters fromwhich the robot should stop if there is an obstacle.

        :returns float: 
        """
        return self.proxy.getSecurityDistance()

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def move(self, x, y, theta):
        """Makes the robot move at the given speed in S.I. units. This is a blocking call.

        :param float x: The speed along x axis [m.s-1].
        :param float y: The speed along y axis [m.s-1].
        :param float theta: The anglular speed around z axis [rad.s-1].
        """
        return self.proxy.move(x, y, theta)

    def move(self, x, y, theta, moveConfig):
        """Makes the robot move at the given speed in S.I. units. This is a blocking call.

        :param float x: The speed along x axis [m.s-1].
        :param float y: The speed along y axis [m.s-1].
        :param float theta: The anglular speed around z axis [rad.s-1].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.move(x, y, theta, moveConfig)

    def moveAlong(self, trajectory):
        """.

        :param AL::ALValue trajectory: An ALValue describing a trajectory.
        :returns bool: 
        """
        return self.proxy.moveAlong(trajectory)

    def moveTo(self, x, y, theta):
        """Makes the robot move at the given position.This is a blocking call.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: The angle around z axis [rad].
        """
        return self.proxy.moveTo(x, y, theta)

    def moveTo(self, x, y, theta, moveConfig):
        """Makes the robot move at the given position.This is a blocking call.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: The angle around z axis [rad].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.moveTo(x, y, theta, moveConfig)

    def moveToward(self, x, y, theta):
        """Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.

        :param float x: The speed along x axis [0.0-1.0].
        :param float y: The speed along y axis [0.0-1.0].
        :param float theta: The anglular speed around z axis [0.0-1.0].
        """
        return self.proxy.moveToward(x, y, theta)

    def moveToward(self, x, y, theta, moveConfig):
        """Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.

        :param float x: The speed along x axis [0.0-1.0].
        :param float y: The speed along y axis [0.0-1.0].
        :param float theta: The anglular speed around z axis [0.0-1.0].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.moveToward(x, y, theta, moveConfig)

    def navigateTo(self, x, y):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y)

    def navigateTo(self, x, y, config):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param AL::ALValue config: Configuration ALValue. For example, [["SpeedFactor", 0.5]] sets speedFactor to 0.5
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, config)

    def navigateTo(self, x, y, theta):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: Orientation of the robot (rad).
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, theta)

    def navigateTo(self, x, y, theta, config):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: Orientation of the robot (rad).
        :param AL::ALValue config: Configuration ALValue. For example, [["SpeedFactor", 0.5]] sets speedFactor to 0.5
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, theta, config)

    def onTouchChanged(self, arg1, arg2, arg3):
        """.

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.onTouchChanged(arg1, arg2, arg3)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def setSecurityDistance(self, arg1):
        """Distance in meters fromwhich the robot should stop if there is an obstacle.

        :param float arg1: arg
        """
        return self.proxy.setSecurityDistance(arg1)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopNavigateTo(self):
        """Stops the navigateTo.
        """
        return self.proxy.stopNavigateTo()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
