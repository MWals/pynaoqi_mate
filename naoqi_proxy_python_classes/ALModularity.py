#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/almodularityproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy



class ALModularity(object):
    def __init__(self):
        self.proxy = None

    def force_connect(self):
        self.proxy = ALProxy("ALModularity")

    def deleteFilter(self, name):
        """

        :param str name: The name of the filter.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.deleteFilter(name)

    def deleteProcess(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.deleteProcess(name)

    def deleteSource(self, name):
        """

        :param str name: The name of the source.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.deleteSource(name)

    def disableProcess(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.disableProcess(name)

    def enableProcess(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.enableProcess(name)

    def getData(self, sink):
        """

        :param str sink: The name of the sink from where data must be extracted.
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getData(sink)

    def getDotGraph(self, filter, level):
        """

        :param str filter: The name of the filter to dump.
        :param int level: Maximum depth (-1 for unlimited depth)
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getDotGraph(filter, level)

    def getFilterDescription(self, name):
        """

        :param str name: The name of the filter.
        :returns str: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getFilterDescription(name)

    def getFilterInputs(self, name):
        """

        :param str name: The name of the filter.
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getFilterInputs(name)

    def getFilterOutputs(self, name):
        """

        :param str name: The name of the filter.
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getFilterOutputs(name)

    def getFilters(self):
        """

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getFilters()

    def getImageLocal(self, sink):
        """

        :param str sink: The name of the sink from where data must be extracted.
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getImageLocal(sink)

    def getImageRemote(self, sink):
        """

        :param str sink: The name of the sink from where data must be extracted.
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getImageRemote(sink)

    def getInstrumentationResult(self):
        """

        :returns str: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getInstrumentationResult()

    def getLastData(self, sink):
        """

        :param str sink: The name of the sink from where data must be extracted.
        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getLastData(sink)

    def getModularity(self):
        """
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getModularity()

    def getProcessAggregatedSinks(self, name):
        """

        :param str name: The name of the process.
        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessAggregatedSinks(name)

    def getProcessDescription(self, name):
        """

        :param str name: The name of the process.
        :returns str: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessDescription(name)

    def getProcessFrequency(self, name):
        """

        :param str name: The name of the process.
        :returns float: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessFrequency(name)

    def getProcessPriority(self, name):
        """

        :param str name: The name of the process.
        :returns int: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessPriority(name)

    def getProcessSinks(self, name):
        """

        :param str name: The name of the process.
        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessSinks(name)

    def getProcessSources(self, name):
        """

        :param str name: The name of the process.
        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcessSources(name)

    def getProcesses(self):
        """

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getProcesses()

    def getRobotHeightOffset(self):
        """

        :returns float: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getRobotHeightOffset()

    def getScheduledJobs(self):
        """

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getScheduledJobs()

    def getSourceFrequency(self, name):
        """

        :param str name: The name of the source.
        :returns float: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getSourceFrequency(name)

    def getSources(self):
        """

        :returns std::vector<std::string>: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.getSources()

    def isProcessEnable(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.isProcessEnable(name)

    def isProcessZombie(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.isProcessZombie(name)

    def isProcesses(self, name):
        """

        :param str name: The name of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.isProcesses(name)

    def isSourceBinded(self, name):
        """

        :param str name: The name of the source.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.isSourceBinded(name)

    def loadProgram(self, program):
        """

        :param str program: The code that will be used by Modularity to generate a part of the graph.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.loadProgram(program)

    def loadProgramFromFile(self, arg1):
        """

        :param str arg1: arg
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.loadProgramFromFile(arg1)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.ping()

    def resetProcess(self, name):
        """

        :param str name: The name of the process to reset.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.resetProcess(name)

    def setProcessFrequency(self, name, priority):
        """

        :param str name: The name of the process.
        :param float priority: The new frequency of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.setProcessFrequency(name, priority)

    def setProcessPriority(self, name, priority):
        """

        :param str name: The name of the process.
        :param qi::uint32_t priority: The new priority of the process.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.setProcessPriority(name, priority)

    def setRobotHeightOffset(self, heightOffset):
        """

        :param float heightOffset: Height Offset of the robot from the ground.
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.setRobotHeightOffset(heightOffset)

    def startScheduler(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.startScheduler()

    def stopScheduler(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.stopScheduler()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = ALProxy("ALModularity")
        return self.proxy.version()
