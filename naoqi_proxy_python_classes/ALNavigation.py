#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alnavigationproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALNavigation")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALNavigation(object):
    def __init__(self):
        self.proxy = None

    @lazy_init
    def getSecurityDistance(self):
        """Distance in meters fromwhich the robot should stop if there is an obstacle.

        :returns float: 
        """
        return self.proxy.getSecurityDistance()

    @lazy_init
    def move(self, x, y, theta):
        """Makes the robot move at the given speed in S.I. units. This is a blocking call.

        :param float x: The speed along x axis [m.s-1].
        :param float y: The speed along y axis [m.s-1].
        :param float theta: The anglular speed around z axis [rad.s-1].
        """
        return self.proxy.move(x, y, theta)

    @lazy_init
    def move2(self, x, y, theta, moveConfig):
        """Makes the robot move at the given speed in S.I. units. This is a blocking call.

        :param float x: The speed along x axis [m.s-1].
        :param float y: The speed along y axis [m.s-1].
        :param float theta: The anglular speed around z axis [rad.s-1].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.move(x, y, theta, moveConfig)

    @lazy_init
    def moveAlong(self, trajectory):
        """.

        :param AL::ALValue trajectory: An ALValue describing a trajectory.
        :returns bool: 
        """
        return self.proxy.moveAlong(trajectory)

    @lazy_init
    def moveTo(self, x, y, theta):
        """Makes the robot move at the given position.This is a blocking call.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: The angle around z axis [rad].
        """
        return self.proxy.moveTo(x, y, theta)

    @lazy_init
    def moveTo2(self, x, y, theta, moveConfig):
        """Makes the robot move at the given position.This is a blocking call.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: The angle around z axis [rad].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.moveTo(x, y, theta, moveConfig)

    @lazy_init
    def moveToward(self, x, y, theta):
        """Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.

        :param float x: The speed along x axis [0.0-1.0].
        :param float y: The speed along y axis [0.0-1.0].
        :param float theta: The anglular speed around z axis [0.0-1.0].
        """
        return self.proxy.moveToward(x, y, theta)

    @lazy_init
    def moveToward2(self, x, y, theta, moveConfig):
        """Makes the robot move at the given speed in normalized speed fraction. This is a blocking call.

        :param float x: The speed along x axis [0.0-1.0].
        :param float y: The speed along y axis [0.0-1.0].
        :param float theta: The anglular speed around z axis [0.0-1.0].
        :param AL::ALValue moveConfig: An ALValue with custom move configuration.
        """
        return self.proxy.moveToward(x, y, theta, moveConfig)

    @lazy_init
    def navigateTo(self, x, y):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y)

    @lazy_init
    def navigateTo2(self, x, y, config):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param AL::ALValue config: Configuration ALValue. For example, [["SpeedFactor", 0.5]] sets speedFactor to 0.5
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, config)

    @lazy_init
    def navigateTo3(self, x, y, theta):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: Orientation of the robot (rad).
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, theta)

    @lazy_init
    def navigateTo4(self, x, y, theta, config):
        """Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles.

        :param float x: The position along x axis [m].
        :param float y: The position along y axis [m].
        :param float theta: Orientation of the robot (rad).
        :param AL::ALValue config: Configuration ALValue. For example, [["SpeedFactor", 0.5]] sets speedFactor to 0.5
        :returns bool: 
        """
        return self.proxy.navigateTo(x, y, theta, config)

    @lazy_init
    def onTouchChanged(self, arg1, arg2, arg3):
        """.

        :param str arg1: arg
        :param AL::ALValue arg2: arg
        :param str arg3: arg
        """
        return self.proxy.onTouchChanged(arg1, arg2, arg3)

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def setSecurityDistance(self, arg1):
        """Distance in meters fromwhich the robot should stop if there is an obstacle.

        :param float arg1: arg
        """
        return self.proxy.setSecurityDistance(arg1)

    @lazy_init
    def stopNavigateTo(self):
        """Stops the navigateTo.
        """
        return self.proxy.stopNavigateTo()

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
