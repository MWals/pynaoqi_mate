#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alsystemproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


# To not instance network connections until we actually want to
# do a proxy call
def lazy_init(fn):
    def init_if_needed(self, *args, **kwargs):
        if not self.proxy:
            self.proxy = ALProxy("ALSystem")
        return fn(self, *args, **kwargs)
    # Preserve method name and docs
    init_if_needed.__name__ = fn.__name__
    init_if_needed.__doc__ = fn.__doc__
    return init_if_needed


class ALSystem(object):
    def __init__(self):
        self.proxy = None

    def force_connect(self):
        self.proxy = ALProxy("ALSystem")

    @lazy_init
    def changePassword(self, old, snew):
        """Change the user password.

        :param str old: password The current password of the user.
        :param str snew: password The new user password.
        """
        return self.proxy.changePassword(old, snew)

    @lazy_init
    def diskFree(self, all):
        """Display free disk space

        :param bool all: Show all mount partions.
        :returns std::vector<AL::ALValue>: A vector with all partions' infos
        """
        return self.proxy.diskFree(all)

    @lazy_init
    def freeMemory(self):
        """Amount of available memory in heap

        :returns int: amount of available memory in heap
        """
        return self.proxy.freeMemory()

    @lazy_init
    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    @lazy_init
    def previousSystemVersion(self):
        """Previous system version before software update (empty if this is not the 1st boot after a software update)

        :returns str: Previous system version before software update.
        """
        return self.proxy.previousSystemVersion()

    @lazy_init
    def reboot(self):
        """Reboot robot
        """
        return self.proxy.reboot()

    @lazy_init
    def robotIcon(self):
        """Robot icon

        :returns AL::ALValue: icon of the robot
        """
        return self.proxy.robotIcon()

    @lazy_init
    def robotName(self):
        """System hostname

        :returns str: name of the robot
        """
        return self.proxy.robotName()

    @lazy_init
    def setRobotName(self, name):
        """Set system hostname

        :param str name: name to use
        :returns bool: whether the operation was successful
        """
        return self.proxy.setRobotName(name)

    @lazy_init
    def setTimezone(self, timezone):
        """Set current timezone

        :param str timezone: timezone to use
        :returns bool: whether the operation was successful
        """
        return self.proxy.setTimezone(timezone)

    @lazy_init
    def shutdown(self):
        """Shutdown robot
        """
        return self.proxy.shutdown()

    @lazy_init
    def systemInfo(self):
        """Running system version

        :returns AL::ALValue: information about the system version
        """
        return self.proxy.systemInfo()

    @lazy_init
    def systemVersion(self):
        """Running system version

        :returns str: running system version
        """
        return self.proxy.systemVersion()

    @lazy_init
    def timezone(self):
        """Current timezone

        :returns str: current timezone
        """
        return self.proxy.timezone()

    @lazy_init
    def totalMemory(self):
        """Amount of total memory in heap

        :returns int: amount of total memory in heap
        """
        return self.proxy.totalMemory()

    @lazy_init
    def upgrade(self, image, checksum):
        """Change the user password.

        :param str image: Local path to a valid image.
        :param str checksum: Local path to a md5 checksum file, or empty string for no verification
        """
        return self.proxy.upgrade(image, checksum)

    @lazy_init
    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()
