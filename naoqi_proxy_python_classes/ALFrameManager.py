#!/usr/bin/env python
# Class autogenerated from /home/sam/Downloads/aldebaran_sw/nao/naoqi-sdk-2.1.4.13-linux64/include/alproxies/alframemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running

from naoqi import ALProxy


class ALFrameManager(object):
    def __init__(self):
        self.proxy = ALProxy("ALFrameManager")

    def getGenericProxy(self):
        """Gets the underlying generic proxy

        :returns boost::shared_ptr<ALProxy>: 
        """
        return self.proxy.getGenericProxy()

    def behaviors(self):
        """List all behaviors currently handled by the frame manager.

        :returns std::vector<std::string>: a set listing all behavior ids
        """
        return self.proxy.behaviors()

    def cleanBehaviors(self):
        """Stop playing any behavior in FrameManager, and delete all of them.
        """
        return self.proxy.cleanBehaviors()

    def completeBehavior(self, id):
        """It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.

        :param str id: The id of the box.
        """
        return self.proxy.completeBehavior(id)

    def createTimeline(self, timelineContent):
        """Creates a timeline.

        :param str timelineContent: The timeline content (in XML format).
        :returns str: return a unique identifier for the created box that contains the timeline. You must call deleteBehavior on it at some point. DEPRECATED since 1.14
        """
        return self.proxy.createTimeline(timelineContent)

    def deleteBehavior(self, id):
        """Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.

        :param str id: The id of the box to delete.
        """
        return self.proxy.deleteBehavior(id)

    def exit(self):
        """Exits and unregisters the module.
        """
        return self.proxy.exit()

    def exitBehavior(self, id):
        """Exit the reading of a timeline contained in a given box

        :param str id: The id of the box.
        """
        return self.proxy.exitBehavior(id)

    def getBehaviorPath(self, id):
        """Returns a playing behavior absolute path.

        :param str id: The id of the behavior.
        :returns str: Returns the absolute path of given behavior.
        """
        return self.proxy.getBehaviorPath(id)

    def getBrokerName(self):
        """Gets the name of the parent broker.

        :returns str: The name of the parent broker.
        """
        return self.proxy.getBrokerName()

    def getMethodHelp(self, methodName):
        """Retrieves a method's description.

        :param str methodName: The name of the method.
        :returns AL::ALValue: A structure containing the method's description.
        """
        return self.proxy.getMethodHelp(methodName)

    def getMethodList(self):
        """Retrieves the module's method list.

        :returns std::vector<std::string>: An array of method names.
        """
        return self.proxy.getMethodList()

    def getModuleHelp(self):
        """Retrieves the module's description.

        :returns AL::ALValue: A structure describing the module.
        """
        return self.proxy.getModuleHelp()

    def getMotionLength(self, id):
        """Returns in seconds, the duration of a given movement stored in a box. Returns 0 if the behavior has no motion layers.  DEPRECATED since 1.14

        :param str id: The id of the box.
        :returns float: Returns the time in seconds.
        """
        return self.proxy.getMotionLength(id)

    def getTimelineFps(self, id):
        """Gets the FPS of a given timeline. DEPRECATED since 1.14

        :param str id: The id of the timeline.
        :returns int: Returns the timeline's FPS.
        """
        return self.proxy.getTimelineFps(id)

    def getUsage(self, name):
        """Gets the method usage string. This summarises how to use the method.

        :param str name: The name of the method.
        :returns str: A string that summarises the usage of the method.
        """
        return self.proxy.getUsage(name)

    def gotoAndPlay(self, id, frame):
        """Goes to a certain frame and continue playing. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param str frame: The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.
        """
        return self.proxy.gotoAndPlay(id, frame)

    def gotoAndPlay2(self, id, frame):
        """Goes to a certain frame and continue playing. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param int frame: The frame we want the timeline to go to.
        """
        return self.proxy.gotoAndPlay(id, frame)

    def gotoAndStop(self, id, frame):
        """Goes to a certain frame and pause. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param str frame: The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.
        """
        return self.proxy.gotoAndStop(id, frame)

    def gotoAndStop2(self, id, frame):
        """Goes to a certain frame and pause. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param int frame: The frame we want the timeline to go to.
        """
        return self.proxy.gotoAndStop(id, frame)

    def isBehaviorRunning(self, id):
        """Tells whether the behavior is running

        :param str id: The id of the behavior to check
        :returns bool: True if the behavior is running, false otherwise
        """
        return self.proxy.isBehaviorRunning(id)

    def isRunning(self, id):
        """Returns true if the method is currently running.

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :returns bool: True if the method is currently running
        """
        return self.proxy.isRunning(id)

    def newBehavior(self, path, xmlFile):
        """Creates a new behavior, from a box found in an xml file. Note that you have to give the xml file contents, so this method is not very user friendly. You have to open the file, and send the string that matches the file contents if you are working from a file. You probably want to use newBehaviorFromFile instead. DEPRECATED since 1.14

        :param str path: The path to reach the box to instantiate in the project ("" if root).
        :param str xmlFile: The choregraphe project (in plain text for the moment).
        :returns str: return a unique identifier for the created box.
        """
        return self.proxy.newBehavior(path, xmlFile)

    def newBehaviorFromChoregraphe(self):
        """Creates a new behavior, from the current Choregraphe behavior 0(uploaded to /tmp/currentChoregrapheBehavior/behavior.xar). DEPRECATED since 1.14

        :returns str: return a unique identifier for the created behavior
        """
        return self.proxy.newBehaviorFromChoregraphe()

    def newBehaviorFromFile(self, xmlFilePath, behName):
        """Creates a new behavior, from a box found in an xml file stored in the robot.

        :param str xmlFilePath: Path to Xml file, ex : "/home/youhou/mybehavior.xar".
        :param str behName: 
        :returns str: return a unique identifier for the created box, that can be used by playBehavior
        """
        return self.proxy.newBehaviorFromFile(xmlFilePath, behName)

    def pCall(self):
        """NAOqi1 pCall method.

        :returns AL::ALValue: 
        """
        return self.proxy.pCall()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        return self.proxy.ping()

    def playBehavior(self, id):
        """Starts a behavior

        :param str id: The id of the box.
        """
        return self.proxy.playBehavior(id)

    def playTimeline(self, id):
        """Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14

        :param str id: The id of the box.
        """
        return self.proxy.playTimeline(id)

    def setTimelineFps(self, id, fps):
        """Sets the FPS of a given timeline. DEPRECATED since 1.14

        :param str id: The id of the timeline.
        :param int fps: The FPS to set.
        """
        return self.proxy.setTimelineFps(id, fps)

    def stop(self, id):
        """returns true if the method is currently running

        :param int id: the ID of the method to wait for
        """
        return self.proxy.stop(id)

    def stopTimeline(self, id):
        """Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14

        :param str id: The id of the box.
        """
        return self.proxy.stopTimeline(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        return self.proxy.version()

    def wait(self, id, timeoutPeriod):
        """Wait for the end of a long running method that was called using 'post'

        :param int id: The ID of the method that was returned when calling the method using 'post'
        :param int timeoutPeriod: The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero.
        :returns bool: True if the timeout period terminated. False if the method returned.
        """
        return self.proxy.wait(id, timeoutPeriod)
